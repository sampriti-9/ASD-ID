import React, { useState, useEffect } from 'react';
import './ImageBasedSentenceBuilder.css';

function ImageBasedSentenceBuilder() {
    const [selectedWords, setSelectedWords] = useState([]);
    const [sentence, setSentence] = useState("Select images to build a sentence.");
    const [language, setLanguage] = useState("en");
    const [activeCategory, setActiveCategory] = useState("Quick Access");
    const [isSpeaking, setIsSpeaking] = useState(false);

    const languageVoices = {
        en: "en-US",
        hi: "hi-IN",
        mr: "mr-IN"
    };

    const handleLanguageChange = (e) => {
        setLanguage(e.target.value);
        setSelectedWords([]);
        setSentence("Select images to build a sentence.");
    };

    useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const sentenceFromURL = params.get('sentence');
        const langFromURL = params.get('lang');

        if (sentenceFromURL) {
            const words = sentenceFromURL.split(" ");
            setSelectedWords(words);
            setSentence(sentenceFromURL);
        }

        if (langFromURL && ["en", "hi", "mr"].includes(langFromURL)) {
            setLanguage(langFromURL);
        }
    }, []);

    const getShareableURL = () => {
        const baseUrl = window.location.origin + window.location.pathname;
        const query = new URLSearchParams({
            sentence: selectedWords.join(" "),
            lang: language
        }).toString();
        return `${baseUrl}?${query}`;
    };

    const handleShareClick = () => {
        const shareURL = getShareableURL();
        const whatsappURL = `https://wa.me/?text=${encodeURIComponent(shareURL)}`;
        window.open(whatsappURL, '_blank');

        navigator.clipboard.writeText(shareURL)
            .then(() => alert("Shareable link copied to clipboard!"))
            .catch(() => alert("Failed to copy the link."));
    };

    const categories = {
        "Quick Access": [
            { emoji: "ЁЯШК", text: { en: "yes", hi: "рд╣рд╛рдБ", mr: "рд╣реЛ" }, type: "response", bgColor: "#ffb3ba" },
            { emoji: "ЁЯШб", text: { en: "no", hi: "рдирд╣реАрдВ", mr: "рдирд╛рд╣реА" }, type: "response", bgColor: "#ffb3ba" },
            { emoji: "ЁЯЫС", text: { en: "stop", hi: "рд░реБрдХрд┐рдП", mr: "рдерд╛рдВрдмрд╛" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯСЛ", text: { en: "hello", hi: "рдирдорд╕реНрддреЗ", mr: "рдирдорд╕реНрдХрд╛рд░" }, type: "greeting", bgColor: "#baffc9" },
            { emoji: "ЁЯЩП", text: { en: "thank you", hi: "рдзрдиреНрдпрд╡рд╛рдж", mr: "рдЖрднрд╛рд░" }, type: "greeting", bgColor: "#baffc9" },
            { emoji: "ЁЯзН", text: { en: "I", hi: "рдореИрдВ", mr: "рдореА" }, type: "pronoun", bgColor: "#ffffba" },
            { emoji: "ЁЯСИ", text: { en: "you", hi: "рддреБрдо", mr: "рддреВ" }, type: "pronoun", bgColor: "#ffffba" },
            { emoji: "ЁЯЧгя╕П", text: { en: "want", hi: "рдЪрд╛рд╣рддрд╛ рд╣реВрдБ", mr: "рд╣рд╡реЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯПГ", text: { en: "go", hi: "рдЬрд╛рдирд╛", mr: "рдЬрд╛рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯТз", text: { en: "water", hi: "рдкрд╛рдиреА", mr: "рдкрд╛рдгреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯеЫ", text: { en: "milk", hi: "рджреВрдз", mr: "рджреВрдз" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНО", text: { en: "apple", hi: "рд╕реЗрдм", mr: "рд╕рдлрд░рдЪрдВрдж" }, type: "noun", bgColor: "#e1baff" }
        ],
        "People": [
            { emoji: "ЁЯСж", text: { en: "boy", hi: "рд▓рдбрд╝рдХрд╛", mr: "рдореБрд▓рдЧрд╛" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСз", text: { en: "girl", hi: "рд▓рдбрд╝рдХреА", mr: "рдореБрд▓рдЧреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСи", text: { en: "man", hi: "рдЖрджрдореА", mr: "рдкреБрд░реБрд╖" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСй", text: { en: "woman", hi: "рдФрд░рдд", mr: "рд╕реНрддреНрд░реА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯС╢", text: { en: "baby", hi: "рдмрдЪреНрдЪрд╛", mr: "рдмрд╛рд│" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯС┤", text: { en: "grandfather", hi: "рджрд╛рджрд╛", mr: "рдЖрдЬреЛрдмрд╛" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯС╡", text: { en: "grandmother", hi: "рджрд╛рджреА", mr: "рдЖрдЬреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСитАНЁЯПл", text: { en: "teacher", hi: "рд╢рд┐рдХреНрд╖рдХ", mr: "рд╢рд┐рдХреНрд╖рдХ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСйтАНтЪХя╕П", text: { en: "doctor", hi: "рдбреЙрдХреНрдЯрд░", mr: "рдбреЙрдХреНрдЯрд░" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСо", text: { en: "police", hi: "рдкреБрд▓рд┐рд╕", mr: "рдкреЛрд▓рд┐рд╕" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСитАНЁЯСйтАНЁЯСзтАНЁЯСж", text: { en: "family", hi: "рдкрд░рд┐рд╡рд╛рд░", mr: "рдХреБрдЯреБрдВрдм" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСл", text: { en: "friend", hi: "рджреЛрд╕реНрдд", mr: "рдорд┐рддреНрд░" }, type: "noun", bgColor: "#e1baff" }
        ],
        "Actions": [
            { emoji: "ЁЯЪ╢", text: { en: "walk", hi: "рдЪрд▓рдирд╛", mr: "рдЪрд╛рд▓рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯПГ", text: { en: "run", hi: "рджреМрдбрд╝рдирд╛", mr: "рдкрд│рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯТГ", text: { en: "dance", hi: "рдирд╛рдЪрдирд╛", mr: "рдирд╛рдЪрдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯОи", text: { en: "draw", hi: "рдЪрд┐рддреНрд░ рдмрдирд╛рдирд╛", mr: "рдЪрд┐рддреНрд░ рдХрд╛рдврдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯШ┤", text: { en: "sleep", hi: "рд╕реЛрдирд╛", mr: "рдЭреЛрдкрдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯШВ", text: { en: "laugh", hi: "рд╣рдБрд╕рдирд╛", mr: "рд╣рд╕рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯН╜я╕П", text: { en: "eat", hi: "рдЦрд╛рдирд╛", mr: "рдЦрд╛рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯед", text: { en: "drink", hi: "рдкреАрдирд╛", mr: "рдкрд┐рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯУЪ", text: { en: "read", hi: "рдкрдврд╝рдирд╛", mr: "рд╡рд╛рдЪрдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "тЬНя╕П", text: { en: "write", hi: "рд▓рд┐рдЦрдирд╛", mr: "рд▓рд┐рд╣рд┐рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯО╡", text: { en: "sing", hi: "рдЧрд╛рдирд╛", mr: "рдЧрд╛рдгреЗ" }, type: "verb", bgColor: "#bae1ff" },
            { emoji: "ЁЯдЭ", text: { en: "help", hi: "рдорджрдж рдХрд░рдирд╛", mr: "рдорджрдд рдХрд░рдгреЗ" }, type: "verb", bgColor: "#bae1ff" }
        ],
        "Objects": [
            { emoji: "ЁЯкС", text: { en: "chair", hi: "рдХреБрд░реНрд╕реА", mr: "рдЦреБрд░реНрдЪреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯЪЧ", text: { en: "car", hi: "рдЧрд╛рдбрд╝реА", mr: "рдЧрд╛рдбреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯУЪ", text: { en: "book", hi: "рдХрд┐рддрд╛рдм", mr: "рдкреБрд╕реНрддрдХ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯУ▒", text: { en: "phone", hi: "рдлреЛрди", mr: "рдлреЛрди" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯПа", text: { en: "house", hi: "рдШрд░", mr: "рдШрд░" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯЪМ", text: { en: "bus", hi: "рдмрд╕", mr: "рдмрд╕" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯЪ▓", text: { en: "bicycle", hi: "рд╕рд╛рдЗрдХрд┐рд▓", mr: "рд╕рд╛рдпрдХрд▓" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "тЪ╜", text: { en: "ball", hi: "рдЧреЗрдВрдж", mr: "рдЪреЗрдВрдбреВ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯОТ", text: { en: "bag", hi: "рдмреИрдЧ", mr: "рдмреЕрдЧ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСХ", text: { en: "shirt", hi: "рд╢рд░реНрдЯ", mr: "рд╢рд░реНрдЯ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯСЯ", text: { en: "shoes", hi: "рдЬреВрддреЗ", mr: "рдЪрдкреНрдкрд▓" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯз╕", text: { en: "toy", hi: "рдЦрд┐рд▓реМрдирд╛", mr: "рдЦреЗрд│рдгреА" }, type: "noun", bgColor: "#e1baff" }
        ],
        "Food": [
            { emoji: "ЁЯНЮ", text: { en: "bread", hi: "рд░реЛрдЯреА", mr: "рдкреЛрд│реА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНО", text: { en: "apple", hi: "рд╕реЗрдм", mr: "рд╕рдлрд░рдЪрдВрдж" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНМ", text: { en: "banana", hi: "рдХреЗрд▓рд╛", mr: "рдХреЗрд│реЗ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНЪ", text: { en: "rice", hi: "рдЪрд╛рд╡рд▓", mr: "рднрд╛рдд" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНХ", text: { en: "pizza", hi: "рдкрд┐рдЬреНрдЬрд╛", mr: "рдкрд┐рдЭреНрдЭрд╛" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНФ", text: { en: "burger", hi: "рдмрд░реНрдЧрд░", mr: "рдмрд░реНрдЧрд░" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯН░", text: { en: "cake", hi: "рдХреЗрдХ", mr: "рдХреЗрдХ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНк", text: { en: "cookie", hi: "рдмрд┐рд╕реНрдХреБрдЯ", mr: "рдмрд┐рд╕реНрдХреАрдЯ" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯед", text: { en: "juice", hi: "рдЬреВрд╕", mr: "рд░рд╕" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "тШХ", text: { en: "coffee", hi: "рдХреЙрдлреА", mr: "рдХреЙрдлреА" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯНп", text: { en: "honey", hi: "рд╢рд╣рдж", mr: "рдордз" }, type: "noun", bgColor: "#e1baff" },
            { emoji: "ЁЯзА", text: { en: "cheese", hi: "рдкрдиреАрд░", mr: "рдкрдиреАрд░" }, type: "noun", bgColor: "#e1baff" }
        ]
    };

    const speak = (text) => {
        if ('speechSynthesis' in window) {
            setIsSpeaking(true);
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = languageVoices[language] || "en-US";
            utterance.rate = 0.8;
            utterance.pitch = 1;
            utterance.onend = () => setIsSpeaking(false);
            utterance.onerror = () => setIsSpeaking(false);
            speechSynthesis.speak(utterance);
        } else {
            alert("Sorry, your browser doesn't support text-to-speech.");
        }
    };

    const handleCardClick = (textObj) => {
        const word = textObj[language];
        speak(word);
        setSelectedWords(prev => [...prev, word]);
        const newSentence = [...selectedWords, word].join(" ");
        setSentence(newSentence);
    };

    const clearSentence = () => {
        setSelectedWords([]);
        setSentence("Select images to build a sentence.");
    };

    const speakSentence = () => {
        if (sentence !== "Select images to build a sentence.") {
            speak(sentence);
        }
    };

    const deleteLastWord = () => {
        if (selectedWords.length > 0) {
            const newSelectedWords = selectedWords.slice(0, -1);
            setSelectedWords(newSelectedWords);
            if (newSelectedWords.length === 0) {
                setSentence("Select images to build a sentence.");
            } else {
                setSentence(newSelectedWords.join(" "));
            }
        }
    };

    const removeWord = (index) => {
        const newSelectedWords = selectedWords.filter((_, i) => i !== index);
        setSelectedWords(newSelectedWords);
        if (newSelectedWords.length === 0) {
            setSentence("Select images to build a sentence.");
        } else {
            setSentence(newSelectedWords.join(" "));
        }
    };

    return (
        <div className="aac-app">
            {/* Header */}
            <div className="app-container">
                <div className="header">
                    <h1 className="main-title">
                        ЁЯЧгя╕П Sentence Builder
                    </h1>
                    <p className="subtitle">
                        Build sentences by selecting images and words
                    </p>
                </div>

                {/* Language Selector */}
                <div className="language-selector">
                    <div className="language-selector-content">
                        <label htmlFor="language" className="language-label">
                            ЁЯМН Language:
                        </label>
                        <select 
                            id="language" 
                            value={language} 
                            onChange={handleLanguageChange}
                            className="language-select"
                        >
                            <option value="en">English</option>
                            <option value="hi">Hindi (рд╣рд┐рдВрджреА)</option>
                            <option value="mr">Marathi (рдорд░рд╛рдареА)</option>
                        </select>
                    </div>
                </div>

                {/* Sentence Display */}
                <div className="sentence-section">
                    <div className="sentence-header">
                        <h2 className="sentence-title">Your Sentence:</h2>
                        <div className="control-buttons">
                            <button 
                                onClick={speakSentence}
                                disabled={isSpeaking || sentence === "Select images to build a sentence."}
                                className="control-btn speak-btn"
                            >
                                {isSpeaking ? 'ЁЯФК' : 'ЁЯФК'} Speak
                            </button>
                            <button 
                                onClick={deleteLastWord}
                                disabled={selectedWords.length === 0}
                                className="control-btn delete-btn"
                            >
                                тмЕя╕П Delete Last
                            </button>
                            <button 
                                onClick={clearSentence}
                                disabled={selectedWords.length === 0}
                                className="control-btn clear-btn"
                            >
                                ЁЯЧСя╕П Clear
                            </button>
                            <button 
                                onClick={handleShareClick}
                                disabled={selectedWords.length === 0}
                                className="control-btn share-btn"
                            >
                                ЁЯУд Share
                            </button>
                        </div>
                    </div>
                    
                    <div className="sentence-display">
                        {selectedWords.length > 0 ? (
                            <div className="word-chips">
                                {selectedWords.map((word, index) => (
                                    <span 
                                        key={index}
                                        className="word-chip"
                                        onClick={() => removeWord(index)}
                                        title="Click to remove this word"
                                    >
                                        {word}
                                        <button className="remove-word-btn">
                                            тЭМ
                                        </button>
                                    </span>
                                ))}
                            </div>
                        ) : (
                            <div className="empty-sentence">
                                {sentence}
                            </div>
                        )}
                    </div>
                </div>

                {/* Category Navigation */}
                <div className="category-nav">
                    <div className="category-buttons">
                        {Object.keys(categories).map((category) => (
                            <button
                                key={category}
                                onClick={() => setActiveCategory(category)}
                                className={`category-btn ${activeCategory === category ? 'active' : ''}`}
                            >
                                {category}
                            </button>
                        ))}
                    </div>
                </div>

                {/* Word Cards */}
                <div className="cards-section">
                    <h2 className="category-title">
                        {activeCategory}
                    </h2>
                    <div className="card-grid">
                        {categories[activeCategory].map((item, idx) => (
                            <div 
                                key={idx} 
                                className="card"
                                style={{ backgroundColor: item.bgColor }}
                                onClick={() => handleCardClick(item.text)}
                            >
                                <div className="card-content">
                                    <div className="card-emoji">{item.emoji}</div>
                                    <div className="card-text">
                                        {item.text[language]}
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            </div>
        </div>
    );
}

export default ImageBasedSentenceBuilder;