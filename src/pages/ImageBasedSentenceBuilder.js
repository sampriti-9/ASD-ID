import React, { useState, useEffect } from 'react';
import './ImageBasedSentenceBuilder.css';

function ImageBasedSentenceBuilder() {
    const [selectedWords, setSelectedWords] = useState([]);
    const [sentence, setSentence] = useState("Select images to build a sentence.");
    const [language, setLanguage] = useState("en");

    const languageVoices = {
        en: "en-US",
        hi: "hi-IN",
        mr: "mr-IN"
    };

    const handleLanguageChange = (e) => {
        setLanguage(e.target.value);
        setSelectedWords([]);
        setSentence("Select images to build a sentence.");
    };

    useEffect(() => {
        const params = new URLSearchParams(window.location.search);
        const sentenceFromURL = params.get('sentence');
        const langFromURL = params.get('lang');

        if (sentenceFromURL) {
            const words = sentenceFromURL.split(" ");
            setSelectedWords(words);
            setSentence(sentenceFromURL);
        }

        if (langFromURL && ["en", "hi", "mr"].includes(langFromURL)) {
            setLanguage(langFromURL);
        }
    }, []);

    const getShareableURL = () => {
        const baseUrl = window.location.origin + window.location.pathname;
        const query = new URLSearchParams({
            sentence: selectedWords.join(" "),
            lang: language
        }).toString();
        return `${baseUrl}?${query}`;
    };

    const handleShareClick = () => {
        const shareURL = getShareableURL();
        const whatsappURL = `https://wa.me/?text=${encodeURIComponent(shareURL)}`;
        window.open(whatsappURL, '_blank');

        navigator.clipboard.writeText(shareURL)
            .then(() => alert("Shareable link copied to clipboard!"))
            .catch(() => alert("Failed to copy the link."));
    };

    const categories = [
        {
            name: "Quick Access",
            items: [
                { emoji: "üòä", text: { en: "yes", hi: "‡§π‡§æ‡§Å", mr: "‡§π‡•ã" }, type: "response", bgColor: "pink" },
                { emoji: "üò°", text: { en: "no", hi: "‡§®‡§π‡•Ä‡§Ç", mr: "‡§®‡§æ‡§π‡•Ä" }, type: "response", bgColor: "pink" },
                { emoji: "üõë", text: { en: "stop", hi: "‡§∞‡•Å‡§ï‡§ø‡§è", mr: "‡§•‡§æ‡§Ç‡§¨‡§æ" }, type: "verb", bgColor: "lightgreen" },
                { emoji: "üëã", text: { en: "hello", hi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á", mr: "‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞" }, type: "greeting", bgColor: "lightgreen" },
                { emoji: "üôè", text: { en: "thank you", hi: "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶", mr: "‡§Ü‡§≠‡§æ‡§∞" }, type: "greeting", bgColor: "lightgreen" },
                { emoji: "üçé", text: { en: "apple", hi: "‡§∏‡•á‡§¨", mr: "‡§∏‡§´‡§∞‡§ö‡§Ç‡§¶" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üçû", text: { en: "bread", hi: "‡§∞‡•ã‡§ü‡•Ä", mr: "‡§™‡•ã‡§≥‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üíß", text: { en: "water", hi: "‡§™‡§æ‡§®‡•Ä", mr: "‡§™‡§æ‡§£‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "ü•õ", text: { en: "milk", hi: "‡§¶‡•Ç‡§ß", mr: "‡§¶‡•Ç‡§ß" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üö∂", text: { en: "walk", hi: "‡§ö‡§≤‡§®‡§æ", mr: "‡§ö‡§æ‡§≤‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üèÉ", text: { en: "run", hi: "‡§¶‡•å‡§°‡§º‡§®‡§æ", mr: "‡§™‡§≥‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "ü™ë", text: { en: "chair", hi: "‡§ï‡•Å‡§∞‡•ç‡§∏‡•Ä", mr: "‡§ñ‡•Å‡§∞‡•ç‡§ö‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üöó", text: { en: "car", hi: "‡§ó‡§æ‡§°‡§º‡•Ä", mr: "‡§ó‡§æ‡§°‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üìö", text: { en: "book", hi: "‡§ï‡§ø‡§§‡§æ‡§¨", mr: "‡§™‡•Å‡§∏‡•ç‡§§‡§ï" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üë¶", text: { en: "boy", hi: "‡§≤‡§°‡§º‡§ï‡§æ", mr: "‡§Æ‡•Å‡§≤‡§ó‡§æ" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üëß", text: { en: "girl", hi: "‡§≤‡§°‡§º‡§ï‡•Ä", mr: "‡§Æ‡•Å‡§≤‡§ó‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üë®", text: { en: "man", hi: "‡§Ü‡§¶‡§Æ‡•Ä", mr: "‡§™‡•Å‡§∞‡•Å‡§∑" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üë©", text: { en: "woman", hi: "‡§î‡§∞‡§§", mr: "‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä" }, type: "noun", bgColor: "lightblue" },
                { emoji: "üßç", text: { en: "I", hi: "‡§Æ‡•à‡§Ç", mr: "‡§Æ‡•Ä" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üëà", text: { en: "you", hi: "‡§§‡•Å‡§Æ", mr: "‡§§‡•Ç" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üë•", text: { en: "we", hi: "‡§π‡§Æ", mr: "‡§Ü‡§Æ‡•ç‡§π‡•Ä" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üë¶", text: { en: "he", hi: "‡§µ‡§π", mr: "‡§§‡•ã" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üëß", text: { en: "she", hi: "‡§µ‡§π", mr: "‡§§‡•Ä" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶", text: { en: "they", hi: "‡§µ‡•á", mr: "‡§§‡•á" }, type: "pronoun", bgColor: "lightyellow" },
                { emoji: "üó£Ô∏è", text: { en: "want", hi: "‡§ö‡§æ‡§π‡§§‡§æ ‡§π‡•Ç‡§Å", mr: "‡§π‡§µ‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üèÉ", text: { en: "go", hi: "‡§ú‡§æ‡§®‡§æ", mr: "‡§ú‡§æ‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üíÉ", text: { en: "dance", hi: "‡§®‡§æ‡§ö‡§®‡§æ", mr: "‡§®‡§æ‡§ö‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üé®", text: { en: "draw", hi: "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§¨‡§®‡§æ‡§®‡§æ", mr: "‡§ö‡§ø‡§§‡•ç‡§∞ ‡§ï‡§æ‡§¢‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üò¥", text: { en: "sleep", hi: "‡§∏‡•ã‡§®‡§æ", mr: "‡§ù‡•ã‡§™‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üòÇ", text: { en: "laugh", hi: "‡§π‡§Å‡§∏‡§®‡§æ", mr: "‡§π‡§∏‡§£‡•á" }, type: "verb", bgColor: "lightblue" },
                { emoji: "üìç", text: { en: "here", hi: "‡§Ø‡§π‡§æ‡§Å", mr: "‡§á‡§•‡•á" }, type: "adverb", bgColor: "lightyellow" },
                { emoji: "üìç", text: { en: "there", hi: "‡§µ‡§π‡§æ‡§Å", mr: "‡§§‡§ø‡§•‡•á" }, type: "adverb", bgColor: "lightyellow" },
                { emoji: "üïí", text: { en: "now", hi: "‡§Ö‡§¨", mr: "‡§Ü‡§§‡§æ" }, type: "adverb", bgColor: "lightyellow" }
            ]
        }
    ];

    const speak = (text) => {
        if ('speechSynthesis' in window) {
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = languageVoices[language] || "en-US";
            speechSynthesis.speak(utterance);
        } else {
            alert("Sorry, your browser doesn't support text-to-speech.");
        }
    };

    const handleCardClick = (textObj) => {
        const word = textObj[language];
        speak(word);
        setSelectedWords(prev => [...prev, word]);
        const newSentence = [...selectedWords, word].join(" ");
        setSentence(newSentence);
    };

    const clearSentence = () => {
        setSelectedWords([]);
        setSentence("Select images to build a sentence.");
    };

    const speakSentence = () => {
        speak(sentence);
    };

    const deleteLastWord = () => {
        if (selectedWords.length > 0) {
            const newSelectedWords = selectedWords.slice(0, -1);
            setSelectedWords(newSelectedWords);
            if (newSelectedWords.length === 0) {
                setSentence("Select images to build a sentence.");
            } else {
                setSentence(newSelectedWords.join(" "));
            }
        }
    };

    return (
        <div className="aac-app">
            <div className="language-selector-wrapper">
                <label htmlFor="language" style={{ fontSize: '1.2rem', fontWeight: 'bold' }}>Choose Language: </label>
                <select id="language" value={language} onChange={handleLanguageChange} style={{ fontSize: '1.2rem', padding: '0.5rem' }}>
                    <option value="en">English</option>
                    <option value="hi">Hindi</option>
                    <option value="mr">Marathi</option>
                </select>
            </div>

            <div className="top-controls">
                <button className="control-btn" onClick={speakSentence}>
                    <div>üîä</div>
                    <div>Speak</div>
                </button>
                <button className="control-btn" onClick={deleteLastWord}>
                    <div>‚ùå</div>
                    <div>Delete</div>
                </button>
                <button className="control-btn" onClick={clearSentence}>
                    <div>üóëÔ∏è</div>
                    <div>Clear</div>
                </button>
                <button className="control-btn" onClick={handleShareClick}>
                    <div>üì§</div>
                    <div>Share</div>
                </button>
            </div>

            <div className="card-grid">
                {categories[0].items.map((item, idx) => (
                    <div 
                        key={idx} 
                        className="card" 
                        style={{ backgroundColor: item.bgColor }}
                        onClick={() => handleCardClick(item.text)}
                    >
                        <div className="card-emoji">{item.emoji}</div>
                        <div className="card-text">{item.text[language]}</div>
                    </div>
                ))}
            </div>

            <div className="sentence-display">
                {sentence}
            </div>
        </div>
    );
}

export default ImageBasedSentenceBuilder;